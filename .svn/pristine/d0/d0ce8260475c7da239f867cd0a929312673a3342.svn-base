package com.saving.metadata.controller;


import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;
import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import com.saving.metadata.common.ResponseCode;
import com.saving.metadata.common.ServerResponse;
import com.saving.metadata.pojo.Revisionlog;
import com.saving.metadata.service.RevisionlogService;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.List;

/**
 * <p>
 * 前端控制器
 * </p>
 *
 * @author 朱柯辉
 * @since 2020-05-09
 */
@RestController
@RequestMapping("/metadata/revisionlog")
@Slf4j
@Api(tags = "修订日志")
public class RevisionlogController {


    private final RevisionlogService revisionlogService;

    @Autowired
    public RevisionlogController(RevisionlogService revisionlogService) {
        this.revisionlogService = revisionlogService;
    }

    @PostMapping("listPage.json")
    @ApiOperation(value = "分页查询接口", notes = "物理分页")
    @ApiImplicitParams(value = {
            @ApiImplicitParam(name = "pageNum", value = "第几页", required = true, paramType = "query"),
            @ApiImplicitParam(name = "pageSize", value = "每页几条", required = true, paramType = "query"),
            @ApiImplicitParam(name = "startDate", value = "过滤上传日期开始时间"),
            @ApiImplicitParam(name = "endDate", value = "过滤上传日期结束时间"),
            @ApiImplicitParam(name = "Revisionlog", value = "文件上传对象，用于过滤")
    })
    public ServerResponse<Page<Revisionlog>> listPage(
            @RequestParam(defaultValue = ResponseCode.PAGENUM) int pageNum
            , @RequestParam(defaultValue = ResponseCode.PAGESIZE) int pageSize
            , Revisionlog revisionlog
            , String startDate
            , String endDate) {
        String operationType = "";
        if ("1".equals(revisionlog.getOperationType())) {
            operationType = "更新";
        }
        if ("0".equals(revisionlog.getOperationType())) {
            operationType = "新增";
        }
        LambdaQueryWrapper<Revisionlog> wrapper = new QueryWrapper<Revisionlog>().lambda()
                .like(StringUtils.isNoneBlank(revisionlog.getSchoolcode())
                        , Revisionlog::getSchoolcode, revisionlog.getSchoolcode())
                .like(StringUtils.isNoneBlank(revisionlog.getSchoolcode())
                        , Revisionlog::getSchoolname, revisionlog.getSchoolname())
                .between(StringUtils.isNoneBlank(startDate) && StringUtils.isNoneBlank(endDate), Revisionlog::getCreatetime, startDate, endDate)
                .eq(StringUtils.isNotEmpty(operationType), Revisionlog::getOperationType, operationType)
                .eq(revisionlog.getOperationStatus() != null, Revisionlog::getOperationStatus, revisionlog.getOperationStatus())
                .orderByAsc(Revisionlog::getSort)
                .orderByAsc(Revisionlog::getSortid)
                .orderByAsc(Revisionlog::getCreatetime);
        Page<Revisionlog> page = (Page<Revisionlog>) revisionlogService.page(new Page<>(pageNum, pageSize), wrapper);
        return ServerResponse.createBySuccess(page);
    }

    @CrossOrigin
    @PostMapping(value = "save.json")
    @ApiOperation(value = "新增选项接口", notes = "新增类型")
    @ApiImplicitParams(value = {
            @ApiImplicitParam(name = "param", value = "选项对象，用于新增", required = true, paramType = "query")
    })
    public ServerResponse save(Revisionlog param) {
        revisionlogService.saveCheck(param);
        return ServerResponse.createBySuccess();
    }


    @PostMapping(value = "dispose.json")
    @ApiOperation(value = "批量采纳处理接口", notes = "更新类型")
    @ApiImplicitParams(value = {
            @ApiImplicitParam(name = "ids", value = "选项对象，用于新增", required = true, paramType = "query")
    })
    public ServerResponse dispose(@RequestBody List<String> ids) {
        revisionlogService.dispose(ids);
        return ServerResponse.createBySuccess();
    }


}

